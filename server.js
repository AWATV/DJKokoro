const configureDiscordBot = require('./discordBot');
const startWebServer = require('./webServer');
require('dotenv').config()

const TOKEN = process.env.TOKEN 

const discordClient = configureDiscordBot(TOKEN);
discordClient.login(TOKEN).then(() => {console.log('Discord –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');});
const WebClient = startWebServer();

discordClient.on('voiceStateUpdate', async (oldState, newState) => {
    if (!newState.guild) {
        console.log("Guild not found in newState");
        return;
    }

    const user = await discordClient.users.fetch(newState.id);
    const member = newState.guild.members.cache.get(user.id);
    if (!member) {
        console.log("Member not found in guild");
        return;
    }

    if (newState.channel && newState.channel.id === '1218952948294352916') {
        const channel = await newState.guild.channels.create({
            type: 2,
            parent: newState.channel.parent,
            name: `–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è ${user.tag}`
        })
        member.voice.setChannel(channel);
        channel.send({embeds: [
            {
                color: 0x0099ff,
                title: `–í—ñ—Ç–∞—î–º–æ ${user.tag}!`,
                description: '–û—Å—å —Ç–≤–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!'
            }
        ],
        components: [
            {
                type: 1,
                components: [
                    {
                        type: 2,
                        style: 2,
                        label: '–ù–∞–∑–≤–∞—Ç–∏',
                        custom_id: 'edit',
                        emoji: '‚úèÔ∏è'
                    },
                    {
                        type: 2,
                        style: 2,
                        label: '–î–æ—Å—Ç—É–ø',
                        custom_id: 'access',
                        emoji: 'üë•'
                    },
                    {
                        type: 2,
                        style: 2,
                        label: '–ö—ñ–∫',
                        custom_id: 'kick',
                        emoji: 'üëü'
                    }
                ]
            },{
                type: 1,
                components: [
                    {
                        type: 2,
                        style: 2,
                        label: '–í—Å—ñ',
                        custom_id: 'public',
                        emoji: 'üåê'
                    },
                    {
                        type: 2,
                        style: 2,
                        label: '–ü—Ä–∏–≤–∞—Ç',
                        custom_id: 'private',
                        emoji: 'üö´'
                    },
                    {
                        type: 2,
                        style: 2,
                        label: '–°—Ö–æ–≤–∞—Ç–∏',
                        custom_id: 'hide',
                        emoji: 'üôà'
                    }
                ]
            },{
                type: 1,
                components: [
                    {
                        type: 2,
                        style: 3,
                        label: '–ü–µ—Ä–µ–¥–∞—Ç–∏',
                        custom_id: 'gift',
                        emoji: 'üéÅ'
                    },
                    {
                        type: 2,
                        style: 1,
                        label: '–ü—Ä–∏–≤–ª–∞—Å–Ω–∏—Ç–∏',
                        custom_id: 'claim',
                        emoji: 'üëë'
                    }
                ]
            },{
                type: 1,
                components: [
                    // StringSelectComponent
                    {
                        type: 3,
                        placeholder: 'üåü –°—É–ø–µ—Ä –∫–Ω–æ–ø–∫–∏',
                        custom_id: 'select',
                        options: [
                            {
                                label: '–ó–±–µ—Ä–µ–≥—Ç–∏',
                                value: 'presetadd',
                                description: '–ø—Ä–µ—Å–µ—Ç –∫–∞–Ω–∞–ª—É',
                                emoji: 'üíæ'
                            },
                            {
                                label: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏',
                                value: 'presetset',
                                description: '–ø—Ä–µ—Å–µ—Ç',
                                emoji: 'üìÇ'
                            },
                            {
                                label: '–°–∫–∏–Ω—É—Ç–∏',
                                value: 'reset',
                                description: '–∫–∞–Ω–∞–ª',
                                emoji: 'üîÑ'
                            },
                            {
                                label: '–ü—ñ–¥–Ω—è—Ç–∏',
                                value: 'push',
                                description: '–∫–∞–Ω–∞–ª —É–≥–æ—Ä—É',
                                emoji: 'üöÄ'
                            },
                            {
                                label: '–û—á–∏—Å—Ç–∏—Ç–∏',
                                value: 'clean',
                                description: '–≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                                emoji: 'üßπ'
                            },
                        ]
                    }
                ]
            }]
        });
    }
    
    if (oldState.channel && oldState.channel.id !== '1218952948294352916' && oldState.channel.parent.id === '1218952592646996069' && oldState.channel.members.size == 0) {
        return oldState.channel.delete();
    }
});
discordClient.on('interactionCreate', async interaction => {
    if (interaction.type == 3) { //button / filed
        if (interaction.customId === 'edit') {
            await interaction.showModal({
                title: '–ù–∞–∑–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª',
                custom_id: 'edit',
                components: [
                    {
                        type: 1,
                        components: [
                            {
                                type: 4,
                                custom_id: 'name',
                                label: '–ù–∞–∑–≤–∞ –∫–∞–Ω–∞–ª—É',
                                placeholder: `–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è ${interaction.user.tag}`,
                                value: interaction.channel.name,
                                style: 1,
                                required: false
                            },
                        ]
                    }
                ]
            });
        }
    }
    if (interaction.type == 5) { //modal
        if (interaction.customId === 'edit') {
            console.log(interaction.components[0].components[0].value)
            interaction.channel.setName(interaction.components[0].components[0].value);
        }
        interaction.reply({ embeds: [{ title: '‚úèÔ∏è –ö–∞–Ω–∞–ª –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', fields: [{ name: '–ù–∞–∑–≤–∞ –∫–∞–Ω–∞–ª—É', value: `\`${interaction.channel.name}\` ‚â´ \`${interaction.components[0].components[0].value}\``
    }], color: 0x00ff00}], ephemeral: true });
    }
});

